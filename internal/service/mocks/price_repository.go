// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/artnikel/TradingService/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PriceRepository is an autogenerated mock type for the PriceRepository type
type PriceRepository struct {
	mock.Mock
}

// ClosePosition provides a mock function with given fields: ctx, deal
func (_m *PriceRepository) ClosePosition(ctx context.Context, deal *model.Deal) error {
	ret := _m.Called(ctx, deal)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Deal) error); ok {
		r0 = rf(ctx, deal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePosition provides a mock function with given fields: ctx, deal
func (_m *PriceRepository) CreatePosition(ctx context.Context, deal *model.Deal) error {
	ret := _m.Called(ctx, deal)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Deal) error); ok {
		r0 = rf(ctx, deal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClosedPositions provides a mock function with given fields: ctx, profileid
func (_m *PriceRepository) GetClosedPositions(ctx context.Context, profileid uuid.UUID) ([]*model.Deal, error) {
	ret := _m.Called(ctx, profileid)

	var r0 []*model.Deal
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Deal); ok {
		r0 = rf(ctx, profileid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Deal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, profileid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnclosedPositions provides a mock function with given fields: ctx, profileid
func (_m *PriceRepository) GetUnclosedPositions(ctx context.Context, profileid uuid.UUID) ([]*model.Deal, error) {
	ret := _m.Called(ctx, profileid)

	var r0 []*model.Deal
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Deal); ok {
		r0 = rf(ctx, profileid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Deal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, profileid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnclosedPositionsForAll provides a mock function with given fields: ctx
func (_m *PriceRepository) GetUnclosedPositionsForAll(ctx context.Context) ([]*model.Deal, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Deal
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Deal); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Deal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: ctx, manager
func (_m *PriceRepository) Subscribe(ctx context.Context, manager chan model.Share) error {
	ret := _m.Called(ctx, manager)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan model.Share) error); ok {
		r0 = rf(ctx, manager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPriceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriceRepository creates a new instance of PriceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriceRepository(t mockConstructorTestingTNewPriceRepository) *PriceRepository {
	mock := &PriceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
