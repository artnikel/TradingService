// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/artnikel/TradingService/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PriceRepository is an autogenerated mock type for the PriceRepository type
type PriceRepository struct {
	mock.Mock
}

// AddDeal provides a mock function with given fields: ctx, strategy, deal
func (_m *PriceRepository) AddDeal(ctx context.Context, strategy string, deal *model.Deal) error {
	ret := _m.Called(ctx, strategy, deal)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Deal) error); ok {
		r0 = rf(ctx, strategy, deal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, position, subscribersActions
func (_m *PriceRepository) Subscribe(ctx context.Context, position *model.Deal, subscribersActions chan []*model.Share) error {
	ret := _m.Called(ctx, position, subscribersActions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Deal, chan []*model.Share) error); ok {
		r0 = rf(ctx, position, subscribersActions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPriceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriceRepository creates a new instance of PriceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriceRepository(t mockConstructorTestingTNewPriceRepository) *PriceRepository {
	mock := &PriceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
